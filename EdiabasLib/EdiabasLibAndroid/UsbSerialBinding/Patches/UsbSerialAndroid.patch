From 06e8c723ec3149e28637e5039fcdcbe18ec27edd Mon Sep 17 00:00:00 2001
From: uholeschak <ulrich@holeschak.de>
Date: Sat, 19 Sep 2015 09:45:55 +0200
Subject: [PATCH 1/2] Added missing functions: - latency timer - modem lines

---
 .../android/usbserial/driver/FtdiSerialDriver.java | 97 ++++++++++++++++++----
 1 file changed, 83 insertions(+), 14 deletions(-)

diff --git a/usbSerialForAndroid/src/main/java/com/hoho/android/usbserial/driver/FtdiSerialDriver.java b/usbSerialForAndroid/src/main/java/com/hoho/android/usbserial/driver/FtdiSerialDriver.java
index 1a9a66b..eb064b5 100644
--- a/usbSerialForAndroid/src/main/java/com/hoho/android/usbserial/driver/FtdiSerialDriver.java
+++ b/usbSerialForAndroid/src/main/java/com/hoho/android/usbserial/driver/FtdiSerialDriver.java
@@ -152,6 +152,11 @@ public class FtdiSerialDriver implements UsbSerialDriver {
          */
         private static final int SIO_SET_FLOW_CTRL_REQUEST = 2;
 
+        private static final int SIO_SET_DTR_HIGH = 0x0101;
+        private static final int SIO_SET_DTR_LOW = 0x0100;
+        private static final int SIO_SET_RTS_HIGH = 0x0202;
+        private static final int SIO_SET_RTS_LOW = 0x0200;
+
         /**
          * Set baud rate.
          */
@@ -166,6 +171,26 @@ public class FtdiSerialDriver implements UsbSerialDriver {
         private static final int SIO_RESET_PURGE_RX = 1;
         private static final int SIO_RESET_PURGE_TX = 2;
 
+        /**
+         * Get modem status.
+         */
+        private static final int SIO_GET_MODEM_STATUS_REQUEST = 5;
+
+        public static final int SIO_MODEM_STATUS_CTS = 0x10;
+        public static final int SIO_MODEM_STATUS_DSR = 0x20;
+        public static final int SIO_MODEM_STATUS_RI = 0x40;
+        public static final int SIO_MODEM_STATUS_RLSD = 0x80;
+
+        /**
+         * Set the latency timer.
+         */
+        private static final int SIO_SET_LATENCY_TIMER_REQUEST = 9;
+
+        /**
+         * Get the latency timer.
+         */
+        private static final int SIO_GET_LATENCY_TIMER_REQUEST = 10;
+
         public static final int FTDI_DEVICE_OUT_REQTYPE =
                 UsbConstants.USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_ENDPOINT_OUT;
 
@@ -183,7 +208,9 @@ public class FtdiSerialDriver implements UsbSerialDriver {
 
         private int mInterface = 0; /* INTERFACE_ANY */
 
-        private int mMaxPacketSize = 64; // TODO(mikey): detect
+        private boolean mDtrState = false;
+
+        private boolean mRtsState = false;
 
         /**
          * Due to http://b.android.com/28023 , we cannot use UsbRequest async reads
@@ -236,6 +263,36 @@ public class FtdiSerialDriver implements UsbSerialDriver {
 
             // TODO(mikey): autodetect.
             mType = DeviceType.TYPE_R;
+            mDtrState = false;
+            mRtsState = false;
+        }
+
+        public void setLatencyTimer(int latencyTime) throws IOException {
+            int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE, SIO_SET_LATENCY_TIMER_REQUEST,
+                    latencyTime, 0 /* index */, null, 0, USB_WRITE_TIMEOUT_MILLIS);
+            if (result != 0) {
+                throw new IOException("Set latency timer failed: result=" + result);
+            }
+        }
+
+        public int getLatencyTimer() throws IOException {
+            byte[] data = new byte[1];
+            int result = mConnection.controlTransfer(FTDI_DEVICE_IN_REQTYPE, SIO_GET_LATENCY_TIMER_REQUEST,
+                    0, 0 /* index */, data, data.length, USB_WRITE_TIMEOUT_MILLIS);
+            if (result != 1) {
+                throw new IOException("Get latency timer failed: result=" + result);
+            }
+            return data[0];
+        }
+
+        public int getModemStatus() throws IOException {
+            byte[] data = new byte[2];
+            int result = mConnection.controlTransfer(FTDI_DEVICE_IN_REQTYPE, SIO_GET_LATENCY_TIMER_REQUEST,
+                    0, 0 /* index */, data, data.length, USB_WRITE_TIMEOUT_MILLIS);
+            if (result != 2) {
+                throw new IOException("Get modem statusfailed: result=" + result);
+            }
+            return data[0];
         }
 
         @Override
@@ -290,7 +347,7 @@ public class FtdiSerialDriver implements UsbSerialDriver {
                 final UsbRequest request = new UsbRequest();
                 request.initialize(mConnection, endpoint);
 
-                final ByteBuffer buf = ByteBuffer.wrap(dest);
+                final ByteBuffer buf = ByteBuffer.wrap(mReadBuffer);
                 if (!request.queue(buf, readAmt)) {
                     throw new IOException("Error queueing request.");
                 }
@@ -299,14 +356,14 @@ public class FtdiSerialDriver implements UsbSerialDriver {
                 if (response == null) {
                     throw new IOException("Null response");
                 }
+                response.close();
 
-                final int payloadBytesRead = buf.position() - MODEM_STATUS_HEADER_LENGTH;
-                if (payloadBytesRead > 0) {
-                    Log.d(TAG, HexDump.dumpHexString(dest, 0, Math.min(32, dest.length)));
-                    return payloadBytesRead;
-                } else {
-                    return 0;
+                final int totalBytesRead = buf.position();
+                if (totalBytesRead < MODEM_STATUS_HEADER_LENGTH) {
+                    throw new IOException("Expected at least " + MODEM_STATUS_HEADER_LENGTH + " bytes");
                 }
+
+                return filterStatusBytes(mReadBuffer, dest, totalBytesRead, endpoint.getMaxPacketSize());
             } else {
                 final int totalBytesRead;
 
@@ -511,40 +568,52 @@ public class FtdiSerialDriver implements UsbSerialDriver {
 
         @Override
         public boolean getCD() throws IOException {
-            return false;
+            return (getModemStatus() & SIO_MODEM_STATUS_RLSD) != 0;
         }
 
         @Override
         public boolean getCTS() throws IOException {
-            return false;
+            return (getModemStatus() & SIO_MODEM_STATUS_CTS) != 0;
         }
 
         @Override
         public boolean getDSR() throws IOException {
-            return false;
+            return (getModemStatus() & SIO_MODEM_STATUS_DSR) != 0;
         }
 
         @Override
         public boolean getDTR() throws IOException {
-            return false;
+            return mDtrState;
         }
 
         @Override
         public void setDTR(boolean value) throws IOException {
+            int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE, SIO_MODEM_CTRL_REQUEST,
+                    value ? SIO_SET_DTR_HIGH : SIO_SET_DTR_LOW, 0 /* index */, null, 0, USB_WRITE_TIMEOUT_MILLIS);
+            if (result != 0) {
+                throw new IOException("Set DTR failed: result=" + result);
+            }
+            mDtrState = value;
         }
 
         @Override
         public boolean getRI() throws IOException {
-            return false;
+            return (getModemStatus() & SIO_MODEM_STATUS_RI) != 0;
         }
 
         @Override
         public boolean getRTS() throws IOException {
-            return false;
+            return mRtsState;
         }
 
         @Override
         public void setRTS(boolean value) throws IOException {
+            int result = mConnection.controlTransfer(FTDI_DEVICE_OUT_REQTYPE, SIO_MODEM_CTRL_REQUEST,
+                    value ? SIO_SET_RTS_HIGH : SIO_SET_RTS_LOW, 0 /* index */, null, 0, USB_WRITE_TIMEOUT_MILLIS);
+            if (result != 0) {
+                throw new IOException("Set DTR failed: result=" + result);
+            }
+            mRtsState = value;
         }
 
         @Override
-- 
1.9.5.msysgit.1


From 5312fdf49808c87b629faf20eaf21579b774bcb4 Mon Sep 17 00:00:00 2001
From: uholeschak <ulrich@holeschak.de>
Date: Sat, 19 Sep 2015 11:05:42 +0200
Subject: [PATCH 2/2] Fixed modem status

---
 .../main/java/com/hoho/android/usbserial/driver/FtdiSerialDriver.java   | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/usbSerialForAndroid/src/main/java/com/hoho/android/usbserial/driver/FtdiSerialDriver.java b/usbSerialForAndroid/src/main/java/com/hoho/android/usbserial/driver/FtdiSerialDriver.java
index eb064b5..61155a2 100644
--- a/usbSerialForAndroid/src/main/java/com/hoho/android/usbserial/driver/FtdiSerialDriver.java
+++ b/usbSerialForAndroid/src/main/java/com/hoho/android/usbserial/driver/FtdiSerialDriver.java
@@ -287,7 +287,7 @@ public class FtdiSerialDriver implements UsbSerialDriver {
 
         public int getModemStatus() throws IOException {
             byte[] data = new byte[2];
-            int result = mConnection.controlTransfer(FTDI_DEVICE_IN_REQTYPE, SIO_GET_LATENCY_TIMER_REQUEST,
+            int result = mConnection.controlTransfer(FTDI_DEVICE_IN_REQTYPE, SIO_GET_MODEM_STATUS_REQUEST,
                     0, 0 /* index */, data, data.length, USB_WRITE_TIMEOUT_MILLIS);
             if (result != 2) {
                 throw new IOException("Get modem statusfailed: result=" + result);
-- 
1.9.5.msysgit.1

